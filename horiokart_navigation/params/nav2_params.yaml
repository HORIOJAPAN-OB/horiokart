amcl:
  ros__parameters:
    use_sim_time: False
    base_frame_id: "base_footprint"
    global_frame_id: "map"
    odom_frame_id: "odom"

    scan_topic: /scan_top_lidar
    laser_max_range: -1.0 # Maximum scan range to be considered, -1.0 will cause the laser’s reported maximum range to be used.
    laser_min_range: -1.0 # Minimum scan range to be considered, -1.0 will cause the laser’s reported minimum range to be used.
    max_beams: 100 # How many evenly-spaced beams in each scan to be used when updating the filter.
    max_particles: 2000
    min_particles: 500

    # For filter update rates
    update_min_a: 0.2 # Rotational movement required before performing a filter update.
    update_min_d: 0.25 # Translational movement required before performing a filter update.

    # Efficient for number of particles. Parameters for KLD sampling.
    pf_err: 0.05 # Particle Filter population error.
    pf_z: 0.99 # Particle filter population density.

    robot_model_type: "nav2_amcl::DifferentialMotionModel"
    alpha1: 0.2 # Expected process noise in odometry's rotation estimate from rotation (rad)
    alpha2: 0.2 # Expected process noise in odometry's rotation estimate from translation (rad)
    alpha3: 0.2 # Expected process noise in odometry's translation estimate from translation (m)
    alpha4: 0.2 # Expected process noise in odometry's translation estimate from rotation (m)
    alpha5: 0.2 # For Omni models only: translation noise.

    laser_model_type: "likelihood_field" # Which model to use, either beam, likelihood_field, or likelihood_field_prob. Same as likelihood_field but incorporates the beamskip feature, if enabled.

    # model params are the same for all laser models
    sigma_hit: 0.2 # Standard deviation for Gaussian model used in z_hit part of the model.
    z_hit: 0.5 # Mixture weight for z_hit part of model, sum of all used z weight must be 1. Beam uses all 4, likelihood model uses z_hit and z_rand..
    z_rand: 0.5 # Mixture weight for z_rand part of model, sum of all used z weight must be 1. Beam uses all 4, likelihood model uses z_hit and z_rand..

    # only for likelihood_field model
    laser_likelihood_max_dist: 2.0 # Maximum distance to do obstacle inflation on map, for use in likelihood_field model.

    # only for beam model
    z_max: 0.05 # Mixture weight for z_max part of model, sum of all used z weight must be 1. Beam uses all 4, likelihood model uses z_hit and z_rand.
    z_short: 0.05 # Mixture weight for z_short part of model, sum of all used z weight must be 1. Beam uses all 4, likelihood model uses z_hit and z_rand.
    lambda_short: 0.1 # Exponential decay parameter for z_short part of model.

    # only for likelihood_prob model?
    beam_skip_distance: 0.5 # Ignore beams that most particles disagree with in Likelihood field model. Maximum distance to consider skipping for (m).
    beam_skip_error_threshold: 0.9 # Percentage of beams after not matching map to force full update due to bad convergance.
    beam_skip_threshold: 0.3 # Percentage of beams required to skip.
    do_beamskip: false # Whether to do beam skipping in Likelihood field model.

    recovery_alpha_fast: 0.0 # Exponential decay rate for the fast average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.1.
    recovery_alpha_slow: 0.0 # Exponential decay rate for the slow average weight filter, used in deciding when to recover by adding random poses. A good value might be 0.001.
    resample_interval: 1 # Number of filter updates required before resampling.
    save_pose_rate: 0.5 # Maximum rate (Hz) at which to store the last estimated pose and covariance to the parameter server, in the variables ~initial_pose_* and ~initial_cov_*. This saved pose will be used on subsequent runs to initialize the filter (-1.0 to disable).

    #################
    tf_broadcast: true # if use ekf, set false
    #################
    transform_tolerance: 1.0
    set_initial_pose: true # Causes AMCL to set initial pose from the initial_pose* parameters instead of waiting for the initial_pose message.
    initial_pose: {x: 0.0, y: 0.0, z: 0.0, yaw: 0.0} # X, Y, Z, and yaw coordinates of initial pose (meters and radians) of robot base frame in global frame.

amcl_map_client:
  ros__parameters:
    use_sim_time: False

amcl_rclcpp_node:
  ros__parameters:
    use_sim_time: False

bt_navigator:
  ros__parameters:
    use_sim_time: False
    global_frame: map
    robot_base_frame: base_footprint
    odom_topic: /odom
    default_bt_xml_filename: "navigate_w_replanning_and_recovery.xml"
    bt_loop_duration: 10
    default_server_timeout: 20
    enable_groot_monitoring: True
    groot_zmq_publisher_port: 1666
    groot_zmq_server_port: 1667
    plugin_lib_names:
    - nav2_compute_path_to_pose_action_bt_node
    - nav2_compute_path_through_poses_action_bt_node
    - nav2_follow_path_action_bt_node
    - nav2_back_up_action_bt_node
    - nav2_spin_action_bt_node
    - nav2_wait_action_bt_node
    - nav2_clear_costmap_service_bt_node
    - nav2_is_stuck_condition_bt_node
    - nav2_goal_reached_condition_bt_node
    - nav2_goal_updated_condition_bt_node
    - nav2_initial_pose_received_condition_bt_node
    - nav2_reinitialize_global_localization_service_bt_node
    - nav2_rate_controller_bt_node
    - nav2_distance_controller_bt_node
    - nav2_speed_controller_bt_node
    - nav2_truncate_path_action_bt_node
    - nav2_goal_updater_node_bt_node
    - nav2_recovery_node_bt_node
    - nav2_pipeline_sequence_bt_node
    - nav2_round_robin_node_bt_node
    - nav2_transform_available_condition_bt_node
    - nav2_time_expired_condition_bt_node
    - nav2_distance_traveled_condition_bt_node
    - nav2_single_trigger_bt_node
    - nav2_is_battery_low_condition_bt_node
    - nav2_navigate_through_poses_action_bt_node
    - nav2_navigate_to_pose_action_bt_node
    - nav2_remove_passed_goals_action_bt_node
    - nav2_planner_selector_bt_node
    - nav2_controller_selector_bt_node
    - nav2_goal_checker_selector_bt_node

bt_navigator_rclcpp_node:
  ros__parameters:
    use_sim_time: False

controller_server:
  ros__parameters:
    use_sim_time: False
    controller_frequency: 10.0
    min_x_velocity_threshold: 0.001
    min_y_velocity_threshold: 0.5
    min_theta_velocity_threshold: 0.001
    failure_tolerance: 0.3
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"] 
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 10.0
    
    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.25
      yaw_goal_tolerance: 0.25

    # DWB parameters
    FollowPath:
      # ローカルプランナーのプラグインを指定します。
      plugin: "dwb_core::DWBLocalPlanner"
      # デバッグ用の軌跡詳細を表示するかどうかを指定します。
      debug_trajectory_details: True
      # x軸方向の最小速度を指定します。
      min_vel_x: 0.0
      # y軸方向の最小速度を指定します。
      min_vel_y: 0.0
      # x軸方向の最大速度を指定します。
      max_vel_x: 0.5
      # y軸方向の最大速度を指定します。
      max_vel_y: 0.0
      # 角速度の最大値を指定します。
      max_vel_theta: 0.8
      # xy平面上の最小速度を指定します。
      min_speed_xy: 0.0
      # xy平面上の最大速度を指定します。
      max_speed_xy: 0.5
      # 角速度の最小値を指定します。
      min_speed_theta: 0.0 # 0.0
      # x軸方向の加速度の最大値を指定します。
      acc_lim_x: 1.0 # 2.5
      # y軸方向の加速度の最大値を指定します。
      acc_lim_y: 0.0
      # 角加速度の最大値を指定します。
      acc_lim_theta: 0.4 # 3.2
      # x軸方向の減速度の最大値を指定します。
      decel_lim_x: -1.0 # -2.5
      # y軸方向の減速度の最大値を指定します。
      decel_lim_y: 0.0
      # 角減速度の最大値を指定します。
      decel_lim_theta: -0.5 #-3.2
      # x軸方向の速度のサンプル数を指定します。
      vx_samples: 10
      # y軸方向の速度のサンプル数を指定します。
      vy_samples: 0
      # 角速度のサンプル数を指定します。
      vtheta_samples: 40
      # シミュレーション時間を指定します。
      sim_time: 1.5
      # 直線移動の粒度を指定します。
      linear_granularity: 0.05
      # 角度移動の粒度を指定します。
      angular_granularity: 0.025
      # トランスフォームの許容誤差を指定します。
      transform_tolerance: 0.2
      # xy平面上のゴールの許容誤差を指定します。
      xy_goal_tolerance: 0.05
      # 停止するための速度を指定します。
      trans_stopped_velocity: 0.25
      # 軌跡評価を早期に終了するかどうかを指定します。
      short_circuit_trajectory_evaluation: True
      # 状態を保持するかどうかを指定します。
      stateful: True
      # 評価するクリティカルな要素を指定します。
      critics: ["RotateToGoal", "Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
      # 障害物のスケールを指定します。
      BaseObstacle.scale: 0.02
      # パスの整列を指定します。
      PathAlign.scale: 32.0
      PathAlign.forward_point_distance: 0.1
      # ゴールの整列を指定します。
      GoalAlign.scale: 24.0
      GoalAlign.forward_point_distance: 0.1
      # パスの距離を指定します。
      PathDist.scale: 32.0
      # ゴールの距離を指定します。
      GoalDist.scale: 24.0
      # ゴールに向かって回転するためのスケールを指定します。
      RotateToGoal.scale: 32.0
      RotateToGoal.slowing_factor: 5.0
      RotateToGoal.lookahead_time: -1.0
      
controller_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 2.0
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: False
      rolling_window: true
      width: 5 # 3
      height: 5 # 3
      resolution: 0.05
      robot_radius: 0.3
      # plugins: ["obstacle_layer", "voxel_layer", "denoise_layer", "inflation_layer"]
      # plugins: ["obstacle_layer", "depth_voxel_layer", "denoise_layer", "inflation_layer"]
      plugins: ["obstacle_layer", "depth_voxel_layer", "denoise_layer", "inflation_layer"]
      # plugins: ["obstacle_layer", "depth_voxel_layer", "inflation_layer"]
      # plugins: ["obstacle_layer", "voxel_layer", "inflation_layer"]

      denoise_layer:
        plugin: "nav2_costmap_2d::DenoiseLayer"
        enabled: True
        # enabled: False
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        inflation_radius: 1.0
        cost_scaling_factor: 3.0
      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan_top_lidar
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan_top_lidar
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      depth_voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 3.0
        mark_threshold: 0
        observation_sources: depth_camera
        depth_camera:
          topic: /rs_d435i/depth/color/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      static_layer:
        map_subscribe_transient_local: True
      always_send_full_costmap: True
  local_costmap_client:
    ros__parameters:
      use_sim_time: False
  local_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

global_costmap:
  global_costmap:
    ros__parameters:
      map_topic: /planning_map
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.3
      resolution: 0.05
      track_unknown_space: true

      # plugins: ["static_layer", "obstacle_layer", "voxel_layer", "inflation_layer"]
      plugins: ["static_layer", "obstacle_layer", "depth_voxel_layer", "inflation_layer"]
      # plugins: ["static_layer", "depth_voxel_layer", "inflation_layer"]

      obstacle_layer:
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: True
        observation_sources: scan
        scan:
          topic: /scan_top_lidar
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0
      voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 2.0
        mark_threshold: 0
        observation_sources: scan
        scan:
          topic: /scan_top_lidar
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      depth_voxel_layer:
        plugin: "nav2_costmap_2d::VoxelLayer"
        enabled: True
        publish_voxel_map: True
        origin_z: 0.0
        z_resolution: 0.05
        z_voxels: 16
        max_obstacle_height: 3.0
        mark_threshold: 0
        observation_sources: depth_camera
        depth_camera:
          topic: /rs_d435i/depth/color/points
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "PointCloud2"
          raytrace_max_range: 3.0
          raytrace_min_range: 0.0
          obstacle_max_range: 2.5
          obstacle_min_range: 0.0

      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 3.0
        inflation_radius: 0.55
      always_send_full_costmap: True
  global_costmap_client:
    ros__parameters:
      use_sim_time: False
  global_costmap_rclcpp_node:
    ros__parameters:
      use_sim_time: False

map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map.yaml"

planning_map_server:
  ros__parameters:
    use_sim_time: False
    yaml_filename: "map.yaml"

map_saver:
  ros__parameters:
    use_sim_time: False
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

planner_server:
  ros__parameters:
    expected_planner_frequency: 20.0
    use_sim_time: False
    planner_plugins: ["GridBased"]
    GridBased:
      plugin: "nav2_navfn_planner/NavfnPlanner"
      tolerance: 0.5
      use_astar: false
      allow_unknown: true

planner_server_rclcpp_node:
  ros__parameters:
    use_sim_time: False

recoveries_server:
  ros__parameters:
    costmap_topic: local_costmap/costmap_raw
    footprint_topic: local_costmap/published_footprint
    cycle_frequency: 10.0
    recovery_plugins: ["spin", "backup", "wait"]
    spin:
      plugin: "nav2_recoveries/Spin"
    backup:
      plugin: "nav2_recoveries/BackUp"
    wait:
      plugin: "nav2_recoveries/Wait"
    global_frame: odom
    robot_base_frame: base_link
    transform_timeout: 0.1
    use_sim_time: true
    simulate_ahead_time: 2.0
    max_rotational_vel: 1.0
    min_rotational_vel: 0.4
    rotational_acc_lim: 3.2

robot_state_publisher:
  ros__parameters:
    use_sim_time: False

waypoint_follower:
  ros__parameters:
    loop_rate: 2000
    stop_on_failure: false
    waypoint_task_executor_plugin: "wait_at_waypoint"   
    wait_at_waypoint:
      plugin: "nav2_waypoint_follower::WaitAtWaypoint"
      enabled: True
      waypoint_pause_duration: 200